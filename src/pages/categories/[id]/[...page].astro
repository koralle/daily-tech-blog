---
import { getCollection } from 'astro:content';
import Layout from '../../../layouts/Layout.astro';
import { getAllTagIds } from '../../../data/tags';
import type { CollectionEntry } from 'astro:content';
import type { GetStaticPathsOptions } from 'astro';

export async function getStaticPaths({ paginate }: GetStaticPathsOptions) {
  const allArticles = await getCollection('articles');
  const allTagIdSet = new Set(getAllTagIds());

  const tagArticlesMap = new Map<string, CollectionEntry<'articles'>[]>();

  for (const tagId of allTagIdSet.values()) {
    tagArticlesMap.set(tagId, []);
  }

  for (const tagId of allTagIdSet.values()) {
    const articlesFilteredByTagId = allArticles.filter((article) => article.data.tags.includes(tagId));
    tagArticlesMap.set(tagId, articlesFilteredByTagId);
  }

  const result = tagArticlesMap.entries().flatMap(([tagId, articles]) => {
    const filteredArticlesByTagId = articles.filter((article) => article.data.tags.includes(tagId));

    return paginate(filteredArticlesByTagId, { params: { id: tagId }, pageSize: 12 });
  });

  return Array.from(result);
}

const { page } = Astro.props;
---

<Layout>
  <article class="flex flex-col py-12">
    <header>
      <h1 class="text-center">カテゴリー一覧</h1>
    </header>
    <p>
      {
        page.data.map((collectionItem) => (
          <li>
            <a href={`/articles/${collectionItem.id}`}>{collectionItem.data.title}</a>
          </li>
        ))
      }
    </p>
    <footer class="flex justify-center gap-4">
      {page.start + 1 !== page.currentPage ? <a href={page.url.first}>&lt;&lt;</a> : null}
      <a href={page.url.prev}> &lt; </a>
      <span>{page.currentPage}</span>
      <a href={page.url.next}> &gt; </a>
      {page.end + 1 !== page.currentPage ? <a href={page.url.last}>&gt;&gt;</a> : null}
    </footer>
  </article>
</Layout>
