---
import Layout from '../../layouts/Layout.astro';
import { getCollection } from 'astro:content';
import FormattedDate from '../../components/FormattedDate.astro';
import Pagination from '../../components/Pagination.astro';
import { Image } from 'astro:assets';

export async function getStaticPaths() {
  const allPosts = (await getCollection('blog')).sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());
  const postsPerPage = 12;
  const totalPages = Math.ceil(allPosts.length / postsPerPage);

  const paths = [];
  for (let i = 1; i <= totalPages; i++) {
    const startIndex = (i - 1) * postsPerPage;
    const endIndex = startIndex + postsPerPage;
    const posts = allPosts.slice(startIndex, endIndex);

    paths.push({
      params: { page: i.toString() },
      props: { posts, currentPage: i, totalPages }
    });
  }

  return paths;
}

const { posts, currentPage, totalPages } = Astro.props;
---

<Layout>
  <div class="w-[960px] max-w-[calc(100%-2em)] mx-auto py-12 px-4">
    <section>
      <h1 class="text-3xl font-bold mb-8 text-center">記事一覧</h1>
      <ul class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 list-none m-0 p-0">
        {
          posts.map((post) => (
            <li class="bg-white rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-shadow">
              <a
                href={`/articles/${post.id}/`}
                class="block no-underline"
              >
                {post.data.heroImage && (
                  <Image
                    width={400}
                    height={200}
                    src={post.data.heroImage}
                    alt=""
                    class="w-full h-48 object-cover"
                  />
                )}
                <div class="p-4">
                  <h3 class="text-lg font-semibold text-black mb-2 hover:text-[var(--accent)]">{post.data.title}</h3>
                  <p class="text-gray-600 text-sm mb-2">{post.data.description}</p>
                  <div class="text-gray-500 text-xs">
                    <div>
                      <FormattedDate date={post.data.pubDate} />
                    </div>
                    {post.data.updatedDate && (
                      <div class="mt-1">
                        更新: <FormattedDate date={post.data.updatedDate} />
                      </div>
                    )}
                  </div>
                </div>
              </a>
            </li>
          ))
        }
      </ul>

      <Pagination
        currentPage={currentPage}
        totalPages={totalPages}
        baseUrl="/posts"
      />
    </section>
  </div>
</Layout>
