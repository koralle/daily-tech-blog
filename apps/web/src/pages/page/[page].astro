---
import { getCollection } from 'astro:content';
import Layout from '../../layouts/Layout.astro';
import type { GetStaticPathsOptions } from 'astro';
import { css } from '../../../styled-system/css';

export async function getStaticPaths({ paginate }: GetStaticPathsOptions) {
  const allArticles = await getCollection('articles');

  return paginate(allArticles, { pageSize: 5 });
}

const { page } = Astro.props;
---

<Layout>
  <div
    class={css({
      display: 'grid',
      gap: '16px',
      md: {
        gap: '32px'
      }
    })}
  >
    <div
      class={css({
        display: 'grid',
        gridTemplateRows: 'repeat(5, auto)',
        width: '100%',
        gap: '16px',
        md: {
          gap: '32px'
        }
      })}
    >
      {
        page.data.map((collectionItem) => (
          <div
            class={css({
              display: 'flex',
              flexDirection: 'column',
              backgroundColor: 'white',
              padding: '16px',
              boxShadow: '0 8px 24px oklch(0% 0 0 / 0.15)',
              gap: '16px',
              md: {
                padding: '24px'
              },
              rounded: '12'
            })}
          >
            <a
              href={`/articles/${collectionItem.id}`}
              class={css({
                color: 'gray.700',
                display: 'inline flex',
                justifyContent: 'start',
                alignItems: 'center',
                textStyle: 'articleTitle'
              })}
            >
              {collectionItem.data.title}
            </a>
            <div
              class={css({
                display: 'flex',
                gap: '16px'
              })}
            >
              {collectionItem.data.tags.map((tag) => (
                <a
                  class={css({
                    color: 'white',
                    backgroundColor: 'rosePink.600',
                    textStyle: 'categoryTag',
                    paddingX: '1em',
                    paddingY: '0.5em',
                    borderRadius: '8'
                  })}
                >
                  {tag}
                </a>
              ))}
            </div>
          </div>
        ))
      }
    </div>
    <div
      class={css({
        display: 'grid',
        placeContent: 'center',
        backgroundColor: 'white',
        padding: '16px',
        rounded: '12',
        boxShadow: '0 8px 24px oklch(0% 0 0 / 0.15)',
        md: {
          padding: '32px'
        }
      })}
    >
      <div>
        {
          page.currentPage === 1 ? (
            // 最初のページ: 1 2 3 > >>
            <>
              <span
                aria-current="true"
                class={css({
                  fontWeight: '700'
                })}
              >
                {page.currentPage}
              </span>
              {page.lastPage >= 2 && (
                <a
                  href={`/page/2`}
                  class={css({})}
                >
                  2
                </a>
              )}
              {page.lastPage >= 3 && (
                <a
                  href={`/page/3`}
                  class={css({})}
                >
                  3
                </a>
              )}
              {page.url.next && (
                <a
                  href={page.url.next}
                  class={css({})}
                >
                  &gt;
                </a>
              )}
              {page.lastPage > 1 && (
                <a
                  href={page.url.last}
                  class={css({})}
                >
                  &gt;&gt;
                </a>
              )}
            </>
          ) : page.currentPage === page.lastPage ? (
            // 最後のページ: << < 8 9 10
            <>
              <a
                href={page.url.first}
                class={css({})}
              >
                &lt;&lt;
              </a>
              <a
                href={page.url.prev}
                class={css({})}
              >
                &lt;
              </a>
              {page.lastPage >= 3 && (
                <a
                  href={`/page/${page.lastPage - 2}`}
                  class={css({})}
                >
                  {page.lastPage - 2}
                </a>
              )}
              {page.lastPage >= 2 && (
                <a
                  href={`/page/${page.lastPage - 1}`}
                  class={css({})}
                >
                  {page.lastPage - 1}
                </a>
              )}
              <span
                aria-current="true"
                class={css({ fontWeight: '700' })}
              >
                {page.currentPage}
              </span>
            </>
          ) : (
            // それ以外: << < 4 5 6 > >>
            <>
              <a
                href={page.url.first}
                class={css({})}
              >
                &lt;&lt;
              </a>
              <a
                href={page.url.prev}
                class={css({})}
              >
                &lt;
              </a>
              <a
                href={`/page/${page.currentPage - 1}`}
                class={css({})}
              >
                {page.currentPage - 1}
              </a>
              <span
                aria-current="true"
                class={css({
                  fontWeight: '700'
                })}
              >
                {page.currentPage}
              </span>
              <a
                href={`/page/${page.currentPage + 1}`}
                class={css({})}
              >
                {page.currentPage + 1}
              </a>
              <a
                href={page.url.next}
                class={css({})}
              >
                &gt;
              </a>
              <a
                href={page.url.last}
                class={css({})}
              >
                &gt;&gt;
              </a>
            </>
          )
        }
      </div>
    </div>
  </div>
</Layout>
