---
import { type CollectionEntry, getCollection } from 'astro:content';
import { render } from 'astro:content';
import Layout from '../../layouts/Layout.astro';
import { getTagById, isValidTagId } from '../../data/tags';
import { formatDate } from '../../utils';
import { Article } from '../../components/Article';
import { css } from '../../../styled-system/css';
import BaseHead from '../../components/BaseHead.astro';
import { Heading } from '../../components/MDX/heading';
import { Paragraph } from './_components/paragraph';

export async function getStaticPaths() {
  const posts = await getCollection('articles');

  return posts.map((post) => ({
    params: { slug: post.id },
    props: post
  }));
}

type Props = CollectionEntry<'articles'>;

const post = Astro.props;
const { Content } = await render(post);
const validTagList = post.data.tags.filter((tagId) => typeof getTagById(tagId) !== 'undefined');
---

<head>
  <BaseHead
    title={post.data.title}
    description={''}
  />
</head>
<Layout
  title={post.data.title}
  description={post.data.description}
>
  <Article>
    <header class={css({ display: 'flex', flexDirection: 'column', gap: '16px' })}>
      <h1 class={css({ textStyle: 'articleTitle', color: 'gray.700' })}>
        {post.data.title}
      </h1>
      {
        validTagList.length > 0 && (
          <div
            class={css({
              display: 'flex',
              gap: 'calc(var(--spacing-unit) * 4)'
            })}
          >
            {validTagList.map((tagId) => {
              const isValid = isValidTagId(tagId);
              if (!isValid) {
                return null;
              }

              const tag = getTagById(tagId);
              if (tag === undefined) {
                return null;
              }

              return (
                <a
                  href={`/categories/${tagId}/1`}
                  class={css({
                    color: 'white',
                    backgroundColor: 'rosePink.600',
                    textStyle: 'categoryTag',
                    paddingX: 'calc(var(--spacing-unit) * 4)',
                    paddingY: 'calc(var(--spacing-unit) * 1)',
                    rounded: '8',
                    outlineOffset: 'calc(var(--spacing-unit) * 1)'
                  })}
                >
                  {tag.displayName}
                </a>
              );
            })}
          </div>
        )
      }
      <p class={css({ textStyle: 'lastUpdated' })}>
        最終更新日: {formatDate('YYYY/MM/DD')(post.data.lastUpdatedDate ?? post.data.publishedDate)}
      </p>
    </header>
    <div
      class={css({
        display: 'flex',
        flexDirection: 'column',
        gap: '16px'
      })}
    >
      <Content components={{ h2: Heading, p: Paragraph }} />
    </div>
  </Article>
</Layout>
