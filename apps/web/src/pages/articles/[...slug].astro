---
import { type CollectionEntry, getCollection } from 'astro:content';
import { render } from 'astro:content';
import Layout from '../../layouts/Layout.astro';
import { getTagById } from '../../data/tags';
import { formatDate } from '../../utils';
import { css } from '../../../styled-system/css';
import { MDX } from './_components/mdx-components';
import { CategoryTag } from '../../components/category-tag';

export async function getStaticPaths() {
  const posts = await getCollection('articles');

  return posts.map((post) => ({
    params: { slug: post.id },
    props: post
  }));
}

type Props = CollectionEntry<'articles'>;

const post = Astro.props;
const { Content } = await render(post);

const validTagList = post.data.tags.filter((tagId) => typeof getTagById(tagId) !== 'undefined');
---

<Layout
  title={post.data.title}
  description={post.data.description}
>
  <article
    class={css({
      display: 'flex',
      flexDirection: 'column',
      flexGrow: '1',
      gap: 'calc(var(--spacing-unit) * 8)',
      rounded: '12',
      backgroundColor: 'white',
      padding: 'calc(var(--spacing-unit) * 4)',
      width: '100%',
      md: {
        padding: 'calc(var(--spacing-unit) * 8)'
      }
    })}
  >
    <header
      class={css({
        display: 'flex',
        flexDirection: 'column',
        gap: 'calc(var(--spacing-unit) * 4)'
      })}
    >
      <h1
        class={css({
          width: '100%',
          color: 'gray.700',
          fontSize: '24',
          fontWeight: '700',
          lineHeight: '150',
          letterSpacing: '0.04em'
        })}
      >
        {post.data.title}
      </h1>
      <div class={css({ display: 'flex', flexDirection: 'column', gap: 'calc(var(--spacing-unit) * 2)' })}>
        {
          validTagList.length > 0 ? (
            <ul
              class={css({
                display: 'flex',
                gap: 'calc(var(--spacing-unit) * 4)'
              })}
            >
              {validTagList.map((tagId) => (
                <li class="inline-block">
                  <CategoryTag href={`/categories/${tagId}/1`}>{getTagById(tagId)?.displayName}</CategoryTag>
                </li>
              ))}
            </ul>
          ) : null
        }
        <p
          class={css({
            display: 'flex',
            alignItems: 'center',
            gap: 'calc(var(--spacing-unit) * 2)'
          })}
        >
          <!-- Source: https://www.mingcute.com/ -->
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="20px"
            height="20px"
            viewBox="0 0 24 24"
          >
            <title>history_anticlockwise_line</title>
            <g fill="none">
              <path
                d="M24 0v24H0V0zM12.594 23.258l-.012.002-.071.035-.02.004-.014-.004-.071-.036c-.01-.003-.019 0-.024.006l-.004.01-.017.428.005.02.01.013.104.074.015.004.012-.004.104-.074.012-.016.004-.017-.017-.427c-.002-.01-.009-.017-.016-.018m.264-.113-.014.002-.184.093-.01.01-.003.011.018.43.005.012.008.008.201.092c.012.004.023 0 .029-.008l.004-.014-.034-.614c-.003-.012-.01-.02-.02-.022m-.715.002a.023.023 0 0 0-.027.006l-.006.014-.034.614c0 .012.007.02.017.024l.015-.002.201-.093.01-.008.003-.011.018-.43-.003-.012-.01-.01z"
              >
              </path>
              <path
                fill="#525252FF"
                d="M20.66 7c2.762 4.783 1.123 10.9-3.66 13.66-4.123 2.38-9.233 1.491-12.335-1.86a1 1 0 0 1 1.468-1.358 8 8 0 1 0-2.06-6.524l1.281-.335c1.047-.273 1.818.97 1.108 1.787L4.21 14.957c-.568.652-1.665.43-1.892-.444A10.003 10.003 0 0 1 7 3.34C11.783.579 17.899 2.217 20.66 7M12 6a1 1 0 0 1 1 1v4.586l2.707 2.707a1 1 0 1 1-1.414 1.414l-3-3A1 1 0 0 1 11 12V7a1 1 0 0 1 1-1"
              >
              </path>
            </g>
          </svg>
          <span
            class={css({
              display: 'inline flex',
              alignItems: 'enter',
              color: 'gray.800',
              fontWeight: '400',
              fontSize: '16',
              letterSpacing: '0.04em',
              lineHeight: '150'
            })}
          >
            最終更新日: {formatDate('YYYY/MM/DD')(post.data.lastUpdatedDate ?? post.data.publishedDate)}
          </span>
        </p>
      </div>
    </header>
    <div
      class={css({
        display: 'flex',
        flexDirection: 'column',
        gap: 'calc(var(--spacing-unit) * 4)'
      })}
    >
      <Content
        components={{
          a: MDX.Link,
          code: MDX.Code,
          h2: MDX.H2,
          p: MDX.Paragraph,
          table: MDX.Table,
          td: MDX.Td,
          th: MDX.Th,
          tr: MDX.Tr,
          ul: MDX.Ul
        }}
      />
    </div>
  </article>
</Layout>
